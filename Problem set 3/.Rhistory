(X[km.init$cluster == c, j] - mu[c, j]))
}
# E-step
mvn.c <- sapply(1:k, function(c) mvn.pdf(X, mu[c,], cov[,, c]))
r_ic <- t(w*t(mvn.c)) / rowSums(t(w*t(mvn.c)))
# M-step
n_c <- colSums(r_ic)
w <- n_c/sum(n_c)
mu <- t(sapply(1:k, function(c) 1/n_c[c] * colSums(r_ic[, c] *
X)))
for(i in 1:p) for(j in 1:p) for(c in 1:k) cov[i, j, c] <-
1/n_c[c] * sum(r_ic[, c] * (X[, i] - mu[c, i]) * r_ic[, c] *
(X[, j] - mu[c, j]))
Delta <- sum((mu - mu_mem)^2)
iter <- iter + 1; mu_mem <- mu
if (is.nan(Delta)){
Delta = 0
}
print(mu)
print(mu_mem)
}
return(list(softcluster = r_ic, cluster = apply(r_ic, 1,
which.max)))
}# run GMM
gmm2 <- gmm.fromscratch(clusterable_data, 3)
gmm.fromscratch <- function(X, k){
p <- ncol(X)  # number of parameters
n <- nrow(X)  # number of observations
Delta <- 1; iter <- 0; itermax <- 30
while(Delta > 1e-4 && iter <= itermax){
print(iter)
# initiation
if(iter == 0){
#km.init <- km.fromscratch(X, k)
km.init <- kmeans(X, k, nstart = 20)
mu <- km.init$center; mu_mem <- mu
w <- sapply(1:k, function(i) length(which(km.init$cluster == i)))
w <- w/sum(w)
cov <- array(dim = c(p, p, k))
for(i in 1:p) for(j in 1:p) for(c in 1:k) cov[i, j, c] <-
1/n * sum((X[km.init$cluster == c, i] - mu[c, i]) *
(X[km.init$cluster == c, j] - mu[c, j]))
}
# E-step
mvn.c <- sapply(1:k, function(c) mvn.pdf(X, mu[c,], cov[,, c]))
r_ic <- t(w*t(mvn.c)) / rowSums(t(w*t(mvn.c)))
# M-step
n_c <- colSums(r_ic)
w <- n_c/sum(n_c)
mu <- t(sapply(1:k, function(c) 1/n_c[c] * colSums(r_ic[, c] *
X)))
for(i in 1:p) for(j in 1:p) for(c in 1:k) cov[i, j, c] <-
1/n_c[c] * sum(r_ic[, c] * (X[, i] - mu[c, i]) * r_ic[, c] *
(X[, j] - mu[c, j]))
Delta <- sum((mu - mu_mem)^2)
print(mu)
print(mu_mem)
iter <- iter + 1; mu_mem <- mu
if (is.nan(Delta)){
Delta = 0
}
}
return(list(softcluster = r_ic, cluster = apply(r_ic, 1,
which.max)))
}# run GMM
gmm2 <- gmm.fromscratch(clusterable_data, 3)
gmm.fromscratch <- function(X, k){
p <- ncol(X)  # number of parameters
n <- nrow(X)  # number of observations
Delta <- 1; iter <- 0; itermax <- 30
while(Delta > 1e-4 && iter <= itermax){
print(iter)
# initiation
if(iter == 0){
#km.init <- km.fromscratch(X, k)
km.init <- kmeans(X, k, nstart = 20)
mu <- km.init$center; mu_mem <- mu
w <- sapply(1:k, function(i) length(which(km.init$cluster == i)))
w <- w/sum(w)
cov <- array(dim = c(p, p, k))
for(i in 1:p) for(j in 1:p) for(c in 1:k) cov[i, j, c] <-
1/n * sum((X[km.init$cluster == c, i] - mu[c, i]) *
(X[km.init$cluster == c, j] - mu[c, j]))
}
# E-step
mvn.c <- sapply(1:k, function(c) mvn.pdf(X, mu[c,], cov[,, c]))
r_ic <- t(w*t(mvn.c)) / rowSums(t(w*t(mvn.c)))
# M-step
n_c <- colSums(r_ic)
print(r_ic[, c])
w <- n_c/sum(n_c)
mu <- t(sapply(1:k, function(c) 1/n_c[c] * colSums(r_ic[, c] *
X)))
for(i in 1:p) for(j in 1:p) for(c in 1:k) cov[i, j, c] <-
1/n_c[c] * sum(r_ic[, c] * (X[, i] - mu[c, i]) * r_ic[, c] *
(X[, j] - mu[c, j]))
Delta <- sum((mu - mu_mem)^2)
iter <- iter + 1; mu_mem <- mu
if (is.nan(Delta)){
Delta = 0
}
}
return(list(softcluster = r_ic, cluster = apply(r_ic, 1,
which.max)))
}# run GMM
gmm2 <- gmm.fromscratch(clusterable_data, 3)
gmm.fromscratch <- function(X, k){
p <- ncol(X)  # number of parameters
n <- nrow(X)  # number of observations
Delta <- 1; iter <- 0; itermax <- 30
while(Delta > 1e-4 && iter <= itermax){
print(iter)
# initiation
if(iter == 0){
#km.init <- km.fromscratch(X, k)
km.init <- kmeans(X, k, nstart = 20)
mu <- km.init$center; mu_mem <- mu
w <- sapply(1:k, function(i) length(which(km.init$cluster == i)))
w <- w/sum(w)
cov <- array(dim = c(p, p, k))
for(i in 1:p) for(j in 1:p) for(c in 1:k) cov[i, j, c] <-
1/n * sum((X[km.init$cluster == c, i] - mu[c, i]) *
(X[km.init$cluster == c, j] - mu[c, j]))
}
# E-step
mvn.c <- sapply(1:k, function(c) mvn.pdf(X, mu[c,], cov[,, c]))
r_ic <- t(w*t(mvn.c)) / rowSums(t(w*t(mvn.c)))
# M-step
n_c <- colSums(r_ic)
w <- n_c/sum(n_c)
mu <- t(sapply(1:k, function(c) 1/n_c[c] * colSums(r_ic[, c] *
X)))
mu[is.na(mu)] <- 0
for(i in 1:p) for(j in 1:p) for(c in 1:k) cov[i, j, c] <-
1/n_c[c] * sum(r_ic[, c] * (X[, i] - mu[c, i]) * r_ic[, c] *
(X[, j] - mu[c, j]))
Delta <- sum((mu - mu_mem)^2)
iter <- iter + 1; mu_mem <- mu
if (is.nan(Delta)){
Delta = 0
}
}
return(list(softcluster = r_ic, cluster = apply(r_ic, 1,
which.max)))
}# run GMM
gmm2 <- gmm.fromscratch(clusterable_data, 3)
gmm.fromscratch <- function(X, k){
p <- ncol(X)  # number of parameters
n <- nrow(X)  # number of observations
Delta <- 1; iter <- 0; itermax <- 30
while(Delta > 1e-4 && iter <= itermax){
print(iter)
# initiation
if(iter == 0){
#km.init <- km.fromscratch(X, k)
km.init <- kmeans(X, k, nstart = 20)
mu <- km.init$center; mu_mem <- mu
w <- sapply(1:k, function(i) length(which(km.init$cluster == i)))
w <- w/sum(w)
cov <- array(dim = c(p, p, k))
for(i in 1:p) for(j in 1:p) for(c in 1:k) cov[i, j, c] <-
1/n * sum((X[km.init$cluster == c, i] - mu[c, i]) *
(X[km.init$cluster == c, j] - mu[c, j]))
}
# E-step
mvn.c <- sapply(1:k, function(c) mvn.pdf(X, mu[c,], cov[,, c]))
r_ic <- t(w*t(mvn.c)) / rowSums(t(w*t(mvn.c)))
# M-step
n_c <- colSums(r_ic)
w <- n_c/sum(n_c)
mu <- t(sapply(1:k, function(c) 1/n_c[c] * colSums(r_ic[, c] *
X)))
mu[is.na(mu)] <- 0
for(i in 1:p) for(j in 1:p) for(c in 1:k) cov[i, j, c] <-
1/n_c[c] * sum(r_ic[, c] * (X[, i] - mu[c, i]) * r_ic[, c] *
(X[, j] - mu[c, j]))
Delta <- sum((mu - mu_mem)^2)
iter <- iter + 1; mu_mem <- mu
if (is.nan(Delta)){
Delta = 0
}
print(r_ic)
}
return(list(softcluster = r_ic, cluster = apply(r_ic, 1,
which.max)))
}# run GMM
gmm2 <- gmm.fromscratch(clusterable_data, 3)
gmm.fromscratch <- function(X, k){
p <- ncol(X)  # number of parameters
n <- nrow(X)  # number of observations
Delta <- 1; iter <- 0; itermax <- 30
while(Delta > 1e-4 && iter <= itermax){
print(iter)
# initiation
if(iter == 0){
#km.init <- km.fromscratch(X, k)
km.init <- kmeans(X, k, nstart = 20)
mu <- km.init$center; mu_mem <- mu
w <- sapply(1:k, function(i) length(which(km.init$cluster == i)))
w <- w/sum(w)
cov <- array(dim = c(p, p, k))
for(i in 1:p) for(j in 1:p) for(c in 1:k) cov[i, j, c] <-
1/n * sum((X[km.init$cluster == c, i] - mu[c, i]) *
(X[km.init$cluster == c, j] - mu[c, j]))
}
# E-step
mvn.c <- sapply(1:k, function(c) mvn.pdf(X, mu[c,], cov[,, c]))
r_ic <- t(w*t(mvn.c)) / rowSums(t(w*t(mvn.c)))
# M-step
n_c <- colSums(r_ic)
w <- n_c/sum(n_c)
mu <- t(sapply(1:k, function(c) 1/n_c[c] * colSums(r_ic[, c] *
X)))
mu[is.na(mu)] <- 0
for(i in 1:p) for(j in 1:p) for(c in 1:k) cov[i, j, c] <-
1/n_c[c] * sum(r_ic[, c] * (X[, i] - mu[c, i]) * r_ic[, c] *
(X[, j] - mu[c, j]))
Delta <- sum((mu - mu_mem)^2)
iter <- iter + 1; mu_mem <- mu
if (is.nan(Delta)){
Delta = 0
}
print(mu)
}
return(list(softcluster = r_ic, cluster = apply(r_ic, 1,
which.max)))
}# run GMM
gmm2 <- gmm.fromscratch(clusterable_data, 3)
#clear the environment
rm(list=ls())
#Import the data
mydata = read.csv("Pid-clean.csv", header = FALSE)
names(mydata) <- c( "V1","V2","V3","V4","V5","V6","V7","V8","V9")
mydata[9][mydata[9]==0] <- 2
mydata[1]<- zscore(mydata[1])
mydata[1]<- (mydata[1]-mean(mydata[1]))/sd(mydata[1])
mydata<- apply(df, 1, function(x) (x - mean(x)) / sd(x))
mydata<- apply(df[1:8], 1, function(x) (x - mean(x)) / sd(x))
mydata<- apply(df[,1:8], 1, function(x) (x - mean(x)) / sd(x))
mydata$v1<- (mydata$v1-mean(mydata$v1))/sd(mydata$v1)
#Import the data
mydata = read.csv("Pid-clean.csv", header = FALSE)
names(mydata) <- c( "V1","V2","V3","V4","V5","V6","V7","V8","V9")
mydata[9][mydata[9]==0] <- 2
mydata$v1<- (mydata$v1-mean(mydata$v1))/sd(mydata$v1)
clusterable_data = mydata[ -c(9) ]
clusterable_data$v1<- (clusterable_data$v1-mean(clusterable_data$v1))/sd(clusterable_data$v1)
clusterable_data[1]<- (clusterable_data[1]-mean(clusterable_data[1]))/sd(clusterable_data[1])
clusterable_data[1]
mean(clusterable_data[1])
mean(clusterable_data$V1)
sd_v1 <- sd(clusterable_data$V1)
mean_v1 <- mean(clusterable_data$V1)
(clusterable_data$V1 - mean_v1) /sd_v1
clusterable_data$V1  <- (clusterable_data$V1 - mean_v1) /sd_v1
mean_v1 <- mean(clusterable_data$V1)
sd_v1 <- sd(clusterable_data$V1)
clusterable_data$V1  <- (clusterable_data$V1 - mean_v1) /sd_v1
mean_v2 <- mean(clusterable_data$V2)
sd_v2 <- sd(clusterable_data$V2)
clusterable_data$V2  <- (clusterable_data$V2 - mean_v2) /sd_v2
mean_v3 <- mean(clusterable_data$V3)
sd_v3 <- sd(clusterable_data$V3)
clusterable_data$V3  <- (clusterable_data$V3 - mean_v3) /sd_v3
mean_v4 <- mean(clusterable_data$V4)
sd_v4 <- sd(clusterable_data$V4)
clusterable_data$V4  <- (clusterable_data$V4 - mean_v4) /sd_v4
mean_v5 <- mean(clusterable_data$V5)
sd_v5 <- sd(clusterable_data$V5)
clusterable_data$V5  <- (clusterable_data$V5 - mean_v5) /sd_v5
mean_v6 <- mean(clusterable_data$V6)
sd_v6 <- sd(clusterable_data$V6)
clusterable_data$V6  <- (clusterable_data$V6 - mean_v6) /sd_v6
mean_v7 <- mean(clusterable_data$V7)
sd_v7 <- sd(clusterable_data$V7)
clusterable_data$V7  <- (clusterable_data$V7 - mean_v7) /sd_v7
mean_v8 <- mean(clusterable_data$V8)
sd_v8 <- sd(clusterable_data$V8)
clusterable_data$V8  <- (clusterable_data$V8 - mean_v8) /sd_v8
clusterable_data
library("fpc")
set.seed(123)
db <- fpc::dbscan(df, eps = 0.15, MinPts = 5)
db <- fpc::dbscan(clusterable_data, eps = 0.15, MinPts = 5)
plot(db, clusterable_data, main = "DBSCAN", frame = FALSE)
library("factoextra")
fviz_cluster(db, clusterable_data, stand = FALSE, frame = FALSE, geom = "point")
fviz_cluster(db, clusterable_data)
db
db$cluster
db <- fpc::dbscan(clusterable_data, eps = 0.42, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
db$cluster
sd_v3 <- sd(clusterable_data$V3)
clusterable_data$V3  <- (clusterable_data$V3 - mean_v3) /sd_v3
db <- fpc::dbscan(clusterable_data, eps = 0.1, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
db$cluster
print(db)
db <- fpc::dbscan(clusterable_data, eps = 1, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
db$cluster
db <- fpc::dbscan(clusterable_data, eps = 2, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
db$cluster
purity <- function(a,b,outliers=FALSE) {
cluster_labels <- unique(a)
class_labels <- unique(b)
elemets_in_class_by_cluster = matrix(0, nrow = length(cluster_labels), ncol = length(class_labels))
i = 1
while (i <= length(a)){
if(a[i] != 0)
elemets_in_class_by_cluster[a[i],b[i]] = elemets_in_class_by_cluster[a[i],b[i]] + 1
i = i + 1
}
sum = 0
i = 1
while (i <= length(cluster_labels)){
sum = sum + max(elemets_in_class_by_cluster[i,])
i = i + 1
}
purity <- sum/length(a)
if (outliers==FALSE){
return (purity)
}else{
outlier_number = 0
n <- table(a)
outlier_number = n[names(n)==0]
outlier_percentage = outlier_number / length(a)
data = c(purity,outlier_percentage)
return(data)
}
}
print(purity(db$cluster,mydata$V3,TRUE))
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1.5, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 2.5, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 2, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 10, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 2, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1.9, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1.8, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
db <- fpc::dbscan(clusterable_data, eps = 1.7, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1.1, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1.2, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1.3, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1.4, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1.5, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
db <- fpc::dbscan(clusterable_data, eps = 1.6, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
db <- fpc::dbscan(clusterable_data, eps = 1.7, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1.8, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1.9, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 2, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 2.1, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 2.2, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 10, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 20, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 2, MinPts = 10)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
db <- fpc::dbscan(clusterable_data, eps = 2, MinPts = 2)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
db <- fpc::dbscan(clusterable_data, eps = 1, MinPts = 2)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1, MinPts = 3)
db <- fpc::dbscan(clusterable_data, eps = 1, MinPts = 3)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
db <- fpc::dbscan(clusterable_data, eps = 1, MinPts = 4)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 1, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = .1, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = .1, MinPts = 1)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = .1, MinPts = 2)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
db <- fpc::dbscan(clusterable_data, eps = 2, MinPts = 5)
library("factoextra")
fviz_cluster(db, clusterable_data)
print(db)
print(purity(db$cluster,mydata$V9,TRUE))
#clear the environment
rm(list=ls())
library(tidyverse)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#Import the data
mydata = read.csv("pima-indians-diabetes.csv", header = FALSE)
#Import the data
mydata = read.csv("pima-indians-diabetes.csv", header = FALSE)
